### Test the first endpoint ###
GET http://127.0.0.1:{{proxy_port}}/card/
Accept: application/json
Content-Type: application/json

> {%
    client.test("Request is 200", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

### Test the second endpoint ###
GET http://127.0.0.1:{{proxy_port}}/auth
Accept: application/json
Content-Type: application/json

> {%
    client.test("Request is 200", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}


### Test to register ###
POST http://127.0.0.1:{{proxy_port}}/auth/register
Accept: application/json
Content-Type: application/json

{
  "username": "{{username}}",
  "password": "{{password}}",
  "email": "{{email}}"
}

> {%
    client.assert(response.status === 200, 'response status is not 200');
    client.global.set("user_uuid", response.body.uuid);
    client.log('user_uuid is ' + client.global.get("user_uuid"));
    client.log('user_uuid is ' + response.body.uuid);
%}

### Add a New Card ###
< {%
    let user_uuid = client.global.get("user_uuid");
    client.log(user_uuid);
%}
POST http://127.0.0.1:{{proxy_port}}/card/addCard
Content-Type: application/json
Cookie: user={{user_uuid}}; Path=/

{
  "name": "first-card",
  "description": "a test card",
  "imageUrl": "",
  "family": "fire",
  "affinity": "water",
  "hp": 100,
  "attack": 45,
  "defense": 30,
  "energy": 25
}

> {%
    client.test("Request is 200", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
    client.global.set("card_uuid", response.body.uuid);
    client.global.set("user_uuid", response.body.ownerUUID);
%}

### Get All Cards ###
GET http://127.0.0.1:{{proxy_port}}/card/getCards
Accept: application/json;

> {%
    client.test("Request is 200", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

### Get Card by UUID ###
GET http://127.0.0.1:{{proxy_port}}/card/{{card_uuid}}
Accept: application/json

> {%
    client.test("Request is 200", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

### Delete Card by UUID ###
< {%
let card_uuid = client.global.get("card_uuid");
client.log(card_uuid);
let user_uuid = client.global.get("user_uuid");
client.log(user_uuid);
%}

DELETE http://127.0.0.1:{{proxy_port}}/card/{{card_uuid}}
Accept: application/json
Cookie: user={{user_uuid}}

> {%
    client.test("Request is 200", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
    // different to NOT_FOUND
    client.test("Card is deleted", function() {
        client.assert(response.body !== "NOT_FOUND", "Card is not deleted");
    });
%}

### Verify Card is Deleted ###
GET http://127.0.0.1:{{proxy_port}}/card/{{card_uuid}}
Accept: application/json
Cookie: user={{user_uuid}}

> {%
    client.test("Request is 404", function() {
        client.assert(response.status === 404, "Response status is not 404, the card should have been deleted by the previous test/request");
    });
%}

### get card by user ###
GET http://127.0.0.1:8000/card/getCardsByOwner
Accept: application/json
Cookie: user={{user_uuid}}

> {%
    client.test("Request is 200", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
    client.log(response.body);
%}
